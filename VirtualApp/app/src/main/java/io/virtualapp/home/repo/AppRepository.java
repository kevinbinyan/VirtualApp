package io.virtualapp.home.repo;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.support.v4.content.FileProvider;

import com.lody.virtual.GmsSupport;
import com.lody.virtual.client.core.InstallStrategy;
import com.lody.virtual.client.core.VirtualCore;
import com.lody.virtual.helper.utils.Base64;
import com.lody.virtual.helper.utils.MD5Utils;
import com.lody.virtual.helper.utils.RSAUtils;
import com.lody.virtual.remote.InstallResult;
import com.lody.virtual.remote.InstalledAppInfo;

import org.jdeferred.Promise;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.interfaces.RSAPrivateKey;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import io.virtualapp.abs.ui.VUiKit;
import io.virtualapp.home.models.AppData;
import io.virtualapp.home.models.AppInfo;
import io.virtualapp.home.models.AppInfoLite;
import io.virtualapp.home.models.MultiplePackageAppData;
import io.virtualapp.home.models.PackageAppData;

/**
 * @author Lody
 */
public class AppRepository implements AppDataSource {

    //原生脱壳的APK
//    private String partData
    //阿里加固的APK 3217
//    private String partData = "3EE56734F2C3D38AEBBF60896619C277D315718B26FDE1E678456AC1F716C8031E11FE82D08B7E6E3F84C75611920364D3DCA3EADEFC60FC46FA2F7B1056DADD41050EB6C7E140912CD27D33899F9B4F2F55F01206006A6444795E7CE638E6366744AC435F24AD80A9559605130A204C25BECDC3971DAB3BC9662C573488F3C3226B80BC277183607116C296671087CFAE6C184B6FFEC28D91012C77BD91892D17DDFE4F7233D866D49B4FDBDC911260706BA9AE5D3045661ADBEE91A84C4C30B5A837C8A2E91E92D0389276CE3301CAAD8952216E3F1C080B37164BEAFB3A1902645BEFA700DCDC7F4309152B5A59FA975E0F3B45F16EB743B6B5A57827313D297FFA9C741EE09BE02A223C1A0BE9D5CDDB727C738BDDDCB532AFE55C6B7853203218E5A277C701E189510198D45CEA3E8311E54917DD57EED365115A1B827F28BDDD3FA6B6290869F10DAB4804E3F643975B7458DF0B8B80BD5DA2CA88360079E4AA668E5425FE6C59EAD67CBC0CFCAC9C5B1A2B73F576FBF46D1226B2C50327C1F941A6E95F9EAB38F87AB222EE46CE76E44DC2A228210403A378A8C87DE3BA179435A3F1A5F0E9CF2AF38734D368CD0B60F19A25F22A17CCF9F3A5A07D6D0CEAE9953765CF72A51BE67F282B0E6BE7784BE68FA94643CC35F7B1E9A76A4BB4F970E6FFC24467978ABA7C9CED4D28811083FA914C9AFFD5DD9A80B24BB1471A01F7B0DDE366005F45C4571A3914374838B177D3B704C8CA71306049F9AA18BECB00B4CFA3182830B058CCF08A5F5EDA1E0FFFBA35C00BAE22DF7A3185D0D97441ACF3EEB717147CF1C8928E71EA460F6B9195E256D912BF996E80C230226BFFCBDD1B3B5E6C7A9ECB2C359F1B1E57B34AA0B43B4613DFEADF35B07987DF2304F460F84EFC77962E5FE184BAFBF310C3E271AD8EE30BED78541980D9748D7CE33597573A91928F65F4D68C2BCD9CAC2584980540844E12B4EB2EDF4EA4040E7BB3F7DF856E1428DBAB1CD16463685B4370BF021446B86CDF74EA409685B22BE0903FE260A3FE494C5379B4328BE0E4E03257C995A575FED6F6C5A019ECC70A415994538B4A3F0CEB444BDB967F8B93B83AD92DD5CF1CD82303B7D7BCFFAEA8ECED6828BCE99772ABEEE95255FF035D890FDA7EFC75F20761F0C04FC2BD67929AA93AC6DC0E7227E8D3EA9B6521CBB1BC4166079D3BB142811908FEC979E04A41D5E498D2FAFA11911B50E6C9228D133E9E2100DCC7B05A001C80F9C92AD1003E160CA2CA552B51DCFD20A30905642C0582FCC2C5B8ABE2200ACCC192698878D7F0826901BA64DD743C655B7960EE8C940EEB71935C58F1759FA5488221874FF81DDE1FEB5343DAB3F30E7959193B87D5E83F1CEBC43B34810A64186F692531115E6E84D5BA1A1810BD1A7987D201EB096FC4789524130B44A8CA06018202D1296E5443D13754EBD4E0256215E4DEA628A02DCDC812D5DA99670FE24136B17B2F4E32153743E288607CD551A20477E9F89C9D43681778DBE8193996B61AB983A005731747559E493B13D5203525DA611E5B39D1585C07B8132C9B9631781F8E494CF962F951BEE6B3466734C7D5CB818DF6370C88848B25A73DC688F4E31F93459196601A8679358568D93BA646CB663E61781E47A95A475215D0D550FA810A431FF5F64572CF998E546DA0463C12B58D31AC00E9000FE57D66F0B9C5180F3AE45F3BE47C5C827635ED8ED5F99F3557F10B489FFBA62AABBBFE2CA179FC3FF29142DF3045995E9AC93F23EE36B6946F31A51C1BE693074578959A62288B95534339CD8B348789D2982A23F18B282196CBAC3F2299AC80B73DB3FEC77C67B0414DBA02C62BE24F9A86B224C843AD6F2C42195F2E0056BC1E45CB474D6B352E45404FC7FF5C2BA8FFCFDF26843D3B6D8B45925BE12A992167E20C76F4EA4113E3CE8021551EB3964DBB52EE9898F68CA88D27D42C7B3A10526494CE9946CEFFCB312FFF5895AD3A4BF61F1B079DED7477E213E83D8259EEE1E0743DE9D1870198B1C7C8FD4B109A71F022FB7EAF6355AF175549B808C8F09C1AFC15FD36D11C83A418FFA0DF23944D6AE184D117DCE8F69757A16C8EE3C9322C67580430EB637DE53F47EDBD7B6F35AE59D95003151D13AF0F798FDB761658BBC7BA4A4F058761";
//    阿里加固的APK 3218
    private String partData = "56E2E64422050A8A82317854C36FE13B996F72DE2EE7D74C8705DD793911A8138075BACE851F27A1F5CC5FB6D15DC11F2071745F60F56E31ECFC826C77408B9291F930896F108F247EC504081401A3E841DB546B84A845360A560ADFDC3257F49917D589EE072F26C0AB9E143A6BD9DCF03154C49AE9D885B99F7B9CE4464EAE3FC25C43BA009EADFF9CBDBF7CEB3B62DFFAB83A51AEE8CF03CBE247387393AF3BD10F4244B72343021DD1B63B6AFCA00CF0356E6AD5102C5B38118E153668EE5B18285F604A4C8A0E7E2AC3DA13E13DDB41F3103B25106892916A38338270489D9FFAA9537D420145F6B2D46B846D75A61C312E39C3DED9E27E5C58A97EE5C12BBA0BD94C644125429FDDE993F016F46F6743D694825815DB178CAD5501629DDA9062D40D129EE3D829B13C1A96D98BFA9D50AEAB68BA7E81CE10F909F17AE923A0D18CC9ED1C6A6DE136F4C74148A07F3E6103AA53388644CFE13E52C59F38D7F44E29FA06A333FA81D0BCCD665978D680EBF379B4B3524443D8387F3A945548E254C2414C05D9BE6D3BC43CAE97B1D879A0FFA20220A3F142FB5D5FBB8102F98D5309E0BD5293348D2E29E82880748385CC32438A5D4DD65D4B8CD5FE8EA6733F4F76F08005956EB7B7FD3848746AA35FFA7A9A2D0660E4BB3AC7D9125475D46EC80D2EDEAC72B7EE531A0D2C48FFC50F4A19175F6D9D7E1A7446863291181732EA78E6CE979A54792132812D4753EA90CFC5114D91615C163D9ABD1DFD40CD7FEF636D85029D7A74A19B5FE69C527C3A0AD87F994CD49D135174F0275FF322861A08D5E3707F6D740AFB38C2A20C4E02D151D1587F5EDF9ADBD7ABE981E812E5A641DE92BB4B2195B955176CEE16776898EE2FFD8CE2A1C53CA48ADF595D6DFECD48D0F35D16F78A68DBBEB08E13AD0EDBCAE1CCB34D4B1A6237D6F9EE881423C2968BAA5EA806883A2AC4973D44A9D17C27E1A216DE4F7FD0E7B2253B44F6B943C8584B53BC60BF679CDFE78D3F8AD1E65A141F3FEAD3B2FBD32CC64CF123A5993FCFBAA7444F2AD5169678490F8EE34A21DAEB1D7F753A58E7FCB4FC637928EA23E1C7BCCD96BECD90E359EA3CAC55CD3E66375FD42392FC99A2A0B96762DE98BB793DA82F7AE307967C0D769A7B9E82AC4231EFD0AA1718EE63F0D2FCF307F300F87D688885E89BF0EC6AEABD22ABAF8592A1D6D61D9BC9188EE9600ED03525FD03C27FC6DB1B2CD7E0FD25AEF846C5D8F17BB919B25BCDA86DCB729A39DC9DD79A19C388ECBDC8D3AD727BD3A71DE406B81D0F40A21E8F4CB8285A4FC881E92608B0754416540BC8550B93B88DC30690A1B1D5A0F5906EDE8CD6F576F0D1AF8741ED5F6A7EFC9A3A769D6EF8497AC47502949C4DF4AEC52760FA6E0FFEC3400A22E2FC5C545D9602F2194A0B8D0A9FF13B6A01C2076D1BEC11EFB48E4D1589E562E093B2481AA766A8BC6C1DC1FBC78740EC586D574C3085A557A08E417AAA4181FA948B6C3954A72BA506CBBD9D4010C84EE89AE0351F8818EFDFBCAB9563B1CF414C59F9E09E50C34C13B4C62B312B5F3616841A4B5F75D6C72AFBF8C9877559BB05E12229057413FAB6631550D8763E7A21A8A3F509E69D45993E4F1E4F7B4D063D8FD95B9550FE2D52C55362544319BA24E3F6E8AC73E0CC89164F831D8D05CF6E202EA018EED775A8D45BA5D7EB3CDC522A3D5F3F62560BED1C51058238BE9840E6F913621832840397A970626280EA98EAF39F7ACEEAF30B87CC5E1865919F00FAD6689426409FCA1DC93192A456B41AA27165BCD536830B2B27810C8CC86E4B09F19E518FCFA626AFABB40EF3E755CD85DB6220654DEA66E568DA98ACECBC8A749526243CD92F9FD3316AB494CD9ACF4C87D16C1E4213590C984C2FE323C3D84C1C5AB3451FAA317D44A133E57572CAA88CD891999B42B23F75EC3987AE7ECD1D0BC8DCC4D241FEDF449E78B00FE6C5B05D76FD2E916070764F76272722D44824A6E49BF1393CD4281607D434C5735441F65E2597B6E8A473817D30AE2476B92A6DD9A1D854C233400E288E79135F863ACCA1F15D070606C2E2B7625756DF7F514668A46A772D1396FFBFAB19286068EA984DEAF00ED33A4CAF0284D4833207711C310665BB166562085B4F2717FBCBC01B0883DFD416F0BB";
    private static final Collator COLLATOR = Collator.getInstance(Locale.CHINA);
    private static final List<String> SCAN_PATH_LIST = Arrays.asList(
            ".",
            "wandoujia/app",
            "tencent/tassistant/apk",
            "BaiduAsa9103056",
            "360Download",
            "pp/downloader",
            "pp/downloader/apk",
            "pp/downloader/silent/apk");

    private Context mContext;

    public AppRepository(Context context) {
        mContext = context;
    }

    private static boolean isSystemApplication(PackageInfo packageInfo) {
        return (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0
                && !GmsSupport.isGmsFamilyPackage(packageInfo.packageName);
    }

    @Override
    public Promise<List<AppData>, Throwable, Void> getVirtualApps() {
        return VUiKit.defer().when(() -> {
            List<InstalledAppInfo> infos = VirtualCore.get().getInstalledApps(0);
            List<AppData> models = new ArrayList<>();
            for (InstalledAppInfo info : infos) {
                if (!VirtualCore.get().isPackageLaunchable(info.packageName)) {
                    continue;
                }
                PackageAppData data = new PackageAppData(mContext, info);
                if (VirtualCore.get().isAppInstalledAsUser(0, info.packageName)) {
                    models.add(data);
                }
                int[] userIds = info.getInstalledUsers();
                for (int userId : userIds) {
                    if (userId != 0) {
                        models.add(new MultiplePackageAppData(data, userId));
                    }
                }
            }
            return models;
        });
    }

    @Override
    public Promise<List<AppInfo>, Throwable, Void> getInstalledApps(Context context) {
        return VUiKit.defer().when(() -> convertPackageInfoToAppData(context, context.getPackageManager().getInstalledPackages(0), true));
    }

    @Override
    public Promise<List<AppInfo>, Throwable, Void> getStorageApps(Context context, File rootDir) {
        return VUiKit.defer().when(() -> convertPackageInfoToAppData(context, installMX(context, rootDir, SCAN_PATH_LIST), false));
    }

    public List<PackageInfo> installMX(Context context, File rootDir, List<String> paths) {
        List<PackageInfo> packageList = new ArrayList<>();
        if (paths == null)
            return packageList;
        for (String path : paths) {
            File[] dirFiles = new File(rootDir, path).listFiles();
            if (dirFiles == null)
                continue;
            for (File f : dirFiles) {
                if (!f.getName().toLowerCase().endsWith(".apk"))
                    continue;
                PackageInfo pkgInfo = null;
                try {
                    pkgInfo = context.getPackageManager().getPackageArchiveInfo(f.getAbsolutePath(), 0);
                    pkgInfo.applicationInfo.sourceDir = f.getAbsolutePath();
                    pkgInfo.applicationInfo.publicSourceDir = f.getAbsolutePath();
                } catch (Exception e) {
                    // Ignore
                }
                if (pkgInfo != null)
                    packageList.add(pkgInfo);
            }
        }
        return packageList;
    }

    public void installMX(Context context) {
        File f = redirctFile(context);
        installApk(context, f);
    }

    public static void installApk(Context context, File file) {
        if (context == null || file == null) {
            return;
        }


        Intent intent = new Intent(Intent.ACTION_VIEW);

        //判读版本是否在7.0以上
        if (Build.VERSION.SDK_INT >= 24) {
            //provider authorities
            Uri apkUri = FileProvider.getUriForFile(context, "com.bin.fileprovider", file);
            //Granting Temporary Permissions to a URI
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            intent.setDataAndType(apkUri, "application/vnd.android.package-archive");
        } else {
            intent.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
        }
        context.startActivity(intent);
    }

    private File redirctFile(Context context) {
        File target = null;
        try {
            InputStream is = context.getAssets().open(MD5Utils.encrypt("aoyou.data"));
            File parent_path = Environment.getExternalStorageDirectory();
            // 可以建立一个子目录专门存放自己专属文件
            File dir = new File(parent_path.getAbsoluteFile(), "sys/temp/user/_template");
            dir.mkdirs();

            byte[] buffer = new byte[1024];
            int byteCount = 0;
            String modulus = "101139253338155537122681263551391401692066665916613487436275955722010199471415841485729163754132286657951275782618854770472010908407158470741951949410587800589127059181738617385251968563652490730289519152085655065302311553563299905910600441758613944432476284758060061258064772215795815169533468766442967476449";
            //私钥指数
            String private_exponent = "77040033353587478351181338141034990369862215683099041858893937555861134440278777222165884672323082873057748117004376901547725049339972199183804313083082114860116154901276523598153162839702785813272951961243156651418620364910731144201588093748132726391031044890152993376853663320094215905479322137162494227093";
            RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);
//            //解密后的明文
            buffer = Base64.decode(RSAUtils.decryptByPrivateKey(partData, priKey));
            target = new File(dir, "targetData");
            FileOutputStream fos = new FileOutputStream(target);
            fos.write(buffer, 0, buffer.length);
            while ((byteCount = is.read(buffer)) != -1) {//循环从输入流读取 buffer字节
                fos.write(buffer, 0, byteCount);//将读取的输入流写入到输出流
            }
            fos.flush();//刷新缓冲区
            is.close();
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return target;
    }

    public List<AppInfo> convertPackageInfoToAppData(Context context, List<PackageInfo> pkgList, boolean fastOpen) {
        PackageManager pm = context.getPackageManager();
        List<AppInfo> list = new ArrayList<>(pkgList.size());
        String hostPkg = VirtualCore.get().getHostPkg();
        for (PackageInfo pkg : pkgList) {
            // ignore the host package
            if (hostPkg.equals(pkg.packageName)) {
                continue;
            }
            // ignore the System package
            if (isSystemApplication(pkg)) {
                continue;
            }

            ApplicationInfo ai = pkg.applicationInfo;
            String path = ai.publicSourceDir != null ? ai.publicSourceDir : ai.sourceDir;
            if (path == null) {
                continue;
            }
            AppInfo info = new AppInfo();
            info.packageName = pkg.packageName;
            info.fastOpen = fastOpen;
            info.path = path;
            info.icon = ai.loadIcon(pm);
            info.name = ai.loadLabel(pm);
            InstalledAppInfo installedAppInfo = VirtualCore.get().getInstalledAppInfo(pkg.packageName, 0);
            if (installedAppInfo != null) {
                info.cloneCount = installedAppInfo.getInstalledUsers().length;
            }
            list.add(info);
        }
        return list;
    }

    private boolean isOrderedApp(String packageName, String pkg) {
        return packageName.equalsIgnoreCase(pkg);// || packageName.equalsIgnoreCase("com.example.kevin.deviceinfo");
    }

    @Override
    public InstallResult addVirtualApp(AppInfoLite info) {
        int flags = InstallStrategy.COMPARE_VERSION | InstallStrategy.SKIP_DEX_OPT;
        if (info.fastOpen) {
            flags |= InstallStrategy.DEPEND_SYSTEM_IF_EXIST;
        }
        return VirtualCore.get().installPackage(info.path, flags);
    }

    @Override
    public boolean removeVirtualApp(String packageName, int userId) {
        return VirtualCore.get().uninstallPackageAsUser(packageName, userId);
    }

    public List<AppInfo> convertPackageInfoToAppData(Context context, List<PackageInfo> pkgList, boolean fastOpen, String orderedPkg) {
        PackageManager pm = context.getPackageManager();
        List<AppInfo> list = new ArrayList<>(pkgList.size());
        String hostPkg = VirtualCore.get().getHostPkg();
        for (PackageInfo pkg : pkgList) {
            // ignore the host package
            if (hostPkg.equals(pkg.packageName)) {
                continue;
            }
            // ignore the System package
            if (isSystemApplication(pkg)) {
                continue;
            }
            if (!isOrderedApp(pkg.packageName, orderedPkg)) {
                continue;
            }
            ApplicationInfo ai = pkg.applicationInfo;
            String path = ai.publicSourceDir != null ? ai.publicSourceDir : ai.sourceDir;
            if (path == null) {
                continue;
            }
            AppInfo info = new AppInfo();
            info.packageName = pkg.packageName;
            info.fastOpen = fastOpen;
            info.path = path;
            info.icon = ai.loadIcon(pm);
            info.name = ai.loadLabel(pm);
            InstalledAppInfo installedAppInfo = VirtualCore.get().getInstalledAppInfo(pkg.packageName, 0);
            if (installedAppInfo != null) {
                info.cloneCount = installedAppInfo.getInstalledUsers().length;
            }
            list.add(info);
        }
        return list;
    }
}
